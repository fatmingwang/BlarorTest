@page "/QuickGridPages"


<div class="grid">
    <QuickGrid Items="@FilteredCountries" Pagination="@pagination">
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Country name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Medals.Gold)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(c => c.Medals.Silver)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(c => c.Medals.Bronze)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(c => c.Medals.Total)" Sortable="true" Align="Align.Right">
            <ColumnOptions>
                <p>Min: <input type="range" @bind="minMedals" @bind:event="oninput" min="0" max="150" /> <span class="inline-block w-10">@minMedals</span></p>
                <p>Max: <input type="range" @bind="maxMedals" @bind:event="oninput" min="0" max="120" /> <span class="inline-block w-10">@maxMedals</span></p>
            </ColumnOptions>
        </PropertyColumn>
    </QuickGrid>
</div>
<Paginator State="@pagination" />

@code 
{
    record Medal(int Total, int Gold, int Silver, int Bronze);
    record Country(string Name, Medal Medals);
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Country>? itemsQueryable;
    string nameFilter;
    int minMedals;
    int maxMedals = 120;

    IQueryable<Country> FilteredCountries = new []
    {
        new Country("qoo1",new Medal(90,1,1,3)),
        new Country("qoo2",new Medal(8,2,1,3)),
        new Country("qoo3",new Medal(7,3,1,3)),
        new Country("qoo4",new Medal(6,4,1,3)),
        new Country("qoo5",new Medal(5,5,1,3)),
        new Country("qoo6",new Medal(4,6,1,3)),
        new Country("qoo7",new Medal(3,7,1,3)),
        new Country("qoo8",new Medal(2,8,1,3)),
        new Country("qoo9",new Medal(1,9,1,3)),

        new Country("1qoo1",new Medal(9,1,1,3)),
        new Country("1qoo2",new Medal(8,2,1,3)),
        new Country("1qoo3",new Medal(7,3,1,3)),
        new Country("1qoo4",new Medal(6,4,1,3)),
        new Country("1qoo5",new Medal(5,5,1,3)),
        new Country("1qoo6",new Medal(4,6,1,3)),
        new Country("1qoo7",new Medal(3,7,1,3)),
        new Country("1qoo8",new Medal(2,8,1,3)),
        new Country("1qoo9",new Medal(1,9,1,3)),

        new Country("qoo12",new Medal(9,1,1,3)),
        new Country("qoo22",new Medal(8,2,1,3)),
        new Country("qoo32",new Medal(7,3,1,3)),
        new Country("qoo42",new Medal(6,4,1,3)),
        new Country("qoo52",new Medal(5,5,1,3)),
        new Country("qoo62",new Medal(4,6,1,3)),
        new Country("qoo72",new Medal(3,7,1,3)),
        new Country("qoo82",new Medal(2,8,1,3)),
        new Country("qoo92",new Medal(0,9,1,3)),

    }.AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        // itemsQueryable = (await Data.GetCountriesAsync()).AsQueryable();
    }


    IQueryable<Country> FilteredCountries2
    {
        get
        {
            var result = itemsQueryable?.Where(c => c.Medals.Total <= maxMedals);

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            if (minMedals > 0)
            {
                result = result.Where(c => c.Medals.Total >= minMedals);
            }

            return result;
        }
    }


}